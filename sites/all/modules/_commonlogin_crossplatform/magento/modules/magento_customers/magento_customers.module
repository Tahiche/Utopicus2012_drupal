<?php
// $Id$

/**
 * This module provides Magento Customers.
 */

module_load_include('inc', 'magento_customers', 'magento_customers.strings');
/////////////////// DRUPAL HOOKS ///////////////////////////////////////
/**
 * Implementation of hook_init().
 */
function magento_customers_init() {
  global $_magento_customers_initiative_customers;

  if (!isset($_magento_customers_initiative_customers)) {
    $_magento_customers_initiative_customers = array();
  }
}

/**
 * Implementation of hook_help().
 */
function magento_customers_help($section) {
    switch ($section) {
        case 'admin/modules#description':
            return t('Synchronization Customers from/to Drupal and Magento.');
    }
}

/**
 * Implementation of hook_menu().
 */
function magento_customers_menu() {
  // settings
  $items['admin/user/roles_propagation'] = array(
    'title' => 'Roles propagation with Magento',
    'description' => 'Assign drupal user roles to Magento customer groups',
    'page callback' => 'drupal_get_form',
    'page arguments' =>  array('magento_customers_roles_propagation'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    );
    //
  $items['admin/settings/magento/customers'] = array(
    'title' => 'Customers',
    'description' => 'Customers synchronization settings',
    'page callback' => 'drupal_get_form',
    'page arguments' =>  array('magento_customers_settings'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_TASK,
    );

  $items['user/%user_category/magento-account-info'] = array(
    'title' => 'Customer info',
    'page callback' => 'magento_customers_customer_info',
    'page arguments' => array(1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'load arguments' => array('%map', '%index'),
    'file' => 'magento_customers.pages.inc',
  );

  $items['user/%user_category/manage-addresses'] = array(
    'title' => 'Manage Addresses',
    'page callback' => 'magento_customer_manage_addresses',
    'page arguments' => array(1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'load arguments' => array('%map', '%index'),
    'file' => 'magento_customer.addresses.inc',
  );

  $items['user/%user_category/new-address'] = array(
    'title' => 'New Address',
    'page callback' => 'magento_customer_new_address',
    'page arguments' => array(1),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'load arguments' => array('%map', '%index'),
    'file' => 'magento_customer.addresses.inc',
  );

  $items['user/%user_category/edit-address/%'] = array(
    'title' => 'Edit Address',
    'page callback' => 'magento_customer_edit_address',
    'page arguments' => array(1, 3),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'load arguments' => array('%map', '%index'),
    'tab_parent' => 'user/%/manage-addresses',
    'file' => 'magento_customer.addresses.inc',
  );
  $items['user/%user_category/remove-address/%'] = array(
    'title' => 'Delete Address',
    'page callback' => 'magento_customer_remove_address',
    'page arguments' => array(1, 3),
    'access callback' => 'user_edit_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'load arguments' => array('%map', '%index'),
    'tab_parent' => 'user/%/manage-addresses',
    'file' => 'magento_customer.addresses.inc',
  );
  $items['address/get_regions'] = array(
    'page callback'    => 'magento_customer_get_regions_field',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'magento_customer.addresses.inc',
  );

  // New address for Anonymous user
  $items['user/0/new-address'] = array(
    'title' => 'New Address',
    'page callback' => 'magento_customer_new_address',
    'page arguments' => array(1),
    'access callback' => 'magento_customers_is_allowed_anonymous_checkout',
    'type' => MENU_LOCAL_TASK,
    'load arguments' => array('%map', '%index'),
    'file' => 'magento_customer.addresses.inc',
  );
  $items['user/0/edit-address/%'] = array(
    'title' => 'Edit Address',
    'page callback' => 'magento_customer_edit_address',
    'page arguments' => array(1, 3),
    'access callback' => 'magento_customers_is_allowed_anonymous_checkout',
    'type' => MENU_CALLBACK,
    'load arguments' => array('%map', '%index'),
//    'tab_parent' => 'user/%/manage-addresses',
    'file' => 'magento_customer.addresses.inc',
  );
  $items['user/0/remove-address/%'] = array(
    'title' => 'Delete Address',
    'page callback' => 'magento_customer_remove_address',
    'page arguments' => array(1, 3),
    'access callback' => 'magento_customers_is_allowed_anonymous_checkout',
    'type' => MENU_CALLBACK,
    'load arguments' => array('%map', '%index'),
//    'tab_parent' => 'user/%/manage-addresses',
    'file' => 'magento_customer.addresses.inc',
  );

  return $items;
}

/**
 * Implementation of hook_form_alter().
 */
function magento_customers_form_alter(&$form, &$form_state, $form_id) {
    switch ($form_id) {
        case 'magento_synchronize_content_form':
            /**************************************
            * CUSTOMERS
            * *************************************/
            $form['customers'] = array('#type' => 'fieldset', '#collapsible' => TRUE,
            '#title'     => t('Customers'),
            '#collapsed' => FALSE,
            );
            // Add button for Manual Synchronization to Settings page
            $form['customers']['synchronize_customers_to_magento'] = array(
            '#type' => 'submit',
            '#value' => 'Synchronize Customers to Magento',
            '#submit' => array('magento_customers_synchronize_customers_to_magento'),
            );
            $form['customers']['synchronize_customers_to_drupal'] = array(
            '#type' => 'submit',
            '#value' => 'Synchronize Customers to Drupal',
            '#submit' => array('magento_customers_synchronize_customers'),
            );
            break;
    }
}

/**
 * Implementation of hook_user().
 */
function magento_customers_user($op, &$edit, &$account, $category = NULL) {
    //global $user;
    $customerData = array();
    if (variable_get('magento_customers_user_event_sync', TRUE)) {
        global $_magento_customers_initiative_customers;
        $_magento_customers_initiative_customers = isset($_magento_customers_initiative_customers) ? $_magento_customers_initiative_customers : array();

        // check if we update this customer from Magento, to prevent infinite looping
        if (!empty($account->mail) && !in_array($account->mail, $_magento_customers_initiative_customers)) {
            array_push($_magento_customers_initiative_customers, $account->mail);
            switch ($op) {
                case 'update':
                    // remember old email if we change it
                    $_SESSION['old_mail'] = array('email' => $account->mail);
                    break;
                case 'insert':
                    $data = $edit;
                    $result = magento_customers_update_magento_customer($account, $data);
                    $edit['customer'] = $data;
                    break;
                case 'after_update':
                    //magento_customers_update_magento_customer
                    if (magento_customer_has_changed($edit)) {
                    $fake = array(); // we don't need this - just to call the function
                    $user = magento_customers_update_magento_customer($account, $fake);
                    }
                    break;
                case 'delete':
                    //When you delete Drupal user, it deletes customer in Magento.
                    $mail = array('email' => $account->mail);
                    $website_id = 0;
                    if (isset($account->customer['website_id'])) {
                        $website_id = $account->customer['website_id'];
                    }
                    $customerId = magento_api_customer_get_customer_id_by_email($mail, $website_id);
                    if ($customerId && is_array($customerId)) {
                        $customer = current($customerId);
                        $id = $customer['customer_id'];
                        if (isset($id)) {
                            $result = magento_api_customer_delete($id);
                        }
                        else {
                            watchdog('magento_customers', 'Error occurs while getting Magento Customer ID to process deleting customer from Magento. Account UID: %uid', array('%uid' => $account->uid), WATCHDOG_WARNING);
                        }
                    }
                    break;
            }
            array_pop($_magento_customers_initiative_customers);
        }
    }
}

/**
 * Implementation of hook_form_id_alter for user_register form
 */
function magento_customers_form_user_register_alter(&$form, &$form_state) {
  module_load_include('inc', 'magento_customers', 'magento_customers.pages');
  _magento_customers_customer_info_form_builder($form, NULL);
  $form['#validate'][] = 'magento_customers_form_user_register_validate';
}

/**
 * Implementation of hook_form_id_validate for user_register form validation
 */
function magento_customers_form_user_register_validate($form, &$form_state) {
  module_load_include('inc', 'magento_customers', 'magento_customers.pages');
  magento_customers_customer_info_form_validate($form, $form_state);

  //default website.
  $form_state['values']['customer']['website_id'] = magento_customers_get_current_website();
}

/**
 * Implementation of hook_form_FORM_ID_alter() for 'user_login' from.
 */
function magento_customers_form_user_login_alter(&$form, &$form_state) {
  if (!empty($_GET['destination']) && ('cart/identification' === $_GET['destination']) && magento_customers_is_allowed_anonymous_checkout()) {
    $form['anonymous_checkout'] = array(
      '#type' => 'markup',
      '#value' => l('Checkout as Guest', 'cart/identification', array('query' => array('anonymous' => 1), 'attributes' => array('style' => 'display: inline-block;padding: 0 20px 0 0;'))),
    );
  }
}

/**
 * Implementation of hook_theme().
 */
function magento_customers_theme() {
  $theme = array();
  //Addresses
  $theme['magento_customers_address_item'] = array(
    'arguments' => array(
      'account' => NULL,
      'address' => NULL,
    ),
    'template' => 'magento_customers_address_item',
  );
  return $theme;
}

/**
 * Implementation of hook_magento_cart_steps_alter();
 *
 * @return
 *   array of [stepname] => array('weight' => (float), 'title' => (string), 'callback' => (callback));
 */
function magento_cart_quote_magento_cart_steps_alter(&$steps) {
  global $user;

  if (!magento_customers_is_allowed_anonymous_checkout()) {
    return;
  }

  $steps['identification'] = array(
      'weight' => 1,
      'title' => t('Identification'),
      'hidden' => !empty($user->uid),
      'callback' => 'magento_customers_quote_step_identification',
    );
}

/**
 * Implementation of hook_cronapi() for Elysia Cron.
 */
function magento_customers_cronapi($op, $job = NULL) {
    switch ($op) {
        case 'list' :
            return array(
            //'magento_customers_synchronize_customer_by_cron' => 'Get recently updated customers from Magento',
            'magento_customers_synchronize_customer_by_cron_to_magento' => 'Get recently updated customers from Drupal to Magento',
            );
            break;
        case 'rule' :
        switch ($job) {
            //case 'magento_customers_synchronize_customer_by_cron' : return '0 0 * * *';
            case 'magento_customers_synchronize_customer_by_cron_to_magento' : return '0 0 * * *';
        }
        break;
    }
}

/////////////////// OPERATIONS WITH CUSTOMER ///////////////////////////
/**
 * Send updated account info to Magento and get Magento Customer ID.
 *
 * @param $account
 *   Drupal user account object.
 *
 * @return $user
 *   Drupal updated user or FALSE.
 */
function magento_customers_update_magento_customer($account, &$data) {
  try {
    if (!empty($data) && $data['mail']) {
      $cust_data = $data['customer'];
    }
    else {
      $cust_data = _magento_customers_load_user_for_sync($account);
    }
    if (!$cust_data) {
      $cust_data = array();
    }
    if (isset($cust_data['addresses'])) {
      $addresses = array();
      foreach ($cust_data['addresses'] as $address) {
        $address['tmp_id'] = uniqid($address['firstname'] . $address['lastname']);
        $addresses[] = $address;
      }
      $cust_data['addresses'] = $addresses;
    }
    else {
      $cust_data['addresses'] = array();
    }

    $cust_data['email']       = isset($account->mail)         ? $account->mail         : NULL;
    $cust_data['init_email']  = isset($account->init)         ? $account->init         : NULL;
    $cust_data['pass']        = isset($account->pass)         ? $account->pass         : NULL;
    $cust_data['group_id']    = magento_customers_get_user_group($account);
    //$cust_data['telephone']   = isset($account->home_phone)   ? $account->home_phone   : NULL;
    //$cust_data['mobile']      = isset($account->mobile_phone) ? $account->mobile_phone : NULL;
    //$cust_data['workphone']   = isset($account->work_phone)   ? $account->work_phone   : NULL;
    //$cust_data['country_id']  = isset($account->country)      ? $account->country      : NULL;

    $result = magento_api_customer_send_customer(array($cust_data));

    if ($result && is_array($result)) {
      if (isset($result['data'])) {
        if (is_array($result['data'])) {
          foreach ($result['data'] as $sync_result) {
            if ($sync_result['success'] === TRUE) {
              if (isset($sync_result['data'])) {
                switch ($sync_result['operation']) {
                  case 'update':
                    if (empty($cust_data['customer_id'])) {
                      $cust_data['customer_id'] = $sync_result['id'];
                    }
                    if ($cust_data['customer_id'] == $sync_result['data']['customer_id']) {
                      $addresses = _magento_customers_update_account_by_magento_customer_address($cust_data['addresses'],  $sync_result['address']);
                      if ($addresses !== FALSE) {
                        $cust_data['addresses'] = $addresses;
                      }
                      global $_magento_customers_initiative_customers;
                      array_push($_magento_customers_initiative_customers, $account->mail);
                      $user = user_save($account, array('customer' => $cust_data, 'customer_id' => $cust_data['customer_id']));
                      return $user;
                    }
                    break;
                  case 'create':
                    if (isset($account->mail) && ($account->mail == $sync_result['data']['email'])) {
                      $cust_data['customer_id'] = $sync_result['id'];
                      $addresses = _magento_customers_update_account_by_magento_customer_address($cust_data['addresses'],  $sync_result['address']);
                      if ($addresses !== FALSE) {
                        $cust_data['addresses'] = $addresses;
                      }
                      global $_magento_customers_initiative_customers;
                      array_push($_magento_customers_initiative_customers, $account->mail);
                      $user = user_save($account, array('customer' => $cust_data, 'customer_id' => $cust_data['customer_id']));
                      $data = $cust_data; // NOTE: this is the only place where we update $data, may be this is wrong? :)
                      return $user;
                    }
                    break;
                  case 'update_by_mail':
                  default:
                    if (isset($account->mail) && ($account->mail == $sync_result['data']['email'])) {
                      $cust_data['customer_id'] = $sync_result['id'];
                      $addresses = _magento_customers_update_account_by_magento_customer_address($cust_data['addresses'],  $sync_result['address']);
                      if ($addresses !== FALSE) {
                        $cust_data['addresses'] = $addresses;
                      }
                      global $_magento_customers_initiative_customers;
                      array_push($_magento_customers_initiative_customers, $account->mail);
                      $user = user_save($account, array('customer' => $cust_data, 'customer_id' => $cust_data['customer_id']));
                      return $user;
                    }
                    break;
                }
              }
            }
          }
        }
      }
    }
    //  } else {
    //here is the case if we create user without Magento Customer Data.
    //    $msg = t('User was created without Magento Customer Data. User ID: %uid', array('%uid' => $account->uid));
    //    watchdog('magento_customers',$msg, array(), WATCHDOG_WARNING);
    //  }
  }
  catch (Exception $e) {
    $dataDump = print_r($data, TRUE);
    $errorMsg = $e->getMessage();
    watchdog('magento_customers_update_magento_customer', 'An exception occured in _magento_cart_update function<br/>Description:<br/>%1<br/>Data variable:<br/>%2', array('%1' => $errorMsg, '%2' => $dataDump), WATCHDOG_ERROR);
    $msgError = array('to' => 'gthognard@ventadis.fr', 'subject' => 'magento_customers_update_magento_customer Error', 'body' => 'An exception occured in _magento_cart_update function<br/>Description:<br/>' . $e->getMessage() . '<br/>Data variable:<br/>' . print_r($data, TRUE));
    drupal_mail_send($msgError);
  }
    return FALSE;
}

/**
 * Return new addresses array merged with Magento's `customer_address_id` data
 */
function _magento_customers_update_account_by_magento_customer_address($drupal_data, $magento_data) {
    $addresses = array();
    if ($magento_data) {
        foreach ($magento_data as $magento_address) {
            $is_new = TRUE;
            foreach ($drupal_data as $drupal_address) {
                if ($drupal_address['tmp_id'] == $magento_address['data']['tmp_id']) {
                    $drupal_address['customer_address_id'] = $magento_address['id'];
                    $addresses[] = $drupal_address;
                    $is_new = FALSE;
                }
            }
        }
        return $addresses;
    }
    else {
        return FALSE;
    }
}

/**
 * Display a form for module settings.
 *
 * @param $form_state
 *   The form state array.
 * @return
 *   An array containing the form elements to be displayed.
 */
function magento_customers_settings() {
    $form = array();

    $form['magento_customers_user_event_sync'] = array(
    '#type' => 'checkbox',
    '#title' => t('User event synchronization enabled'),
    '#description' => t('Sync user to magento on user events (insert/update/delete).'),
    '#default_value' => variable_get('magento_customers_user_event_sync', TRUE),
    );

    $form['magento_customers_sync_page_size_to_drupal'] = array(
    '#type' => 'textfield',
    '#title' => t('Sync page size to Drupal'),
    '#description' => t('Size of portion to synchronize Magento Customers into Drupal Users'),
    '#default_value' => variable_get('magento_customers_sync_page_size_to_drupal', 25),
    );

    $form['magento_customers_sync_page_size_to_magento'] = array(
    '#type' => 'textfield',
    '#title' => t('Sync page size to Magento'),
    '#description' => t('Size of portion to synchronize Drupal Users into Magento Customers'),
    '#default_value' => variable_get('magento_customers_sync_page_size_to_magento', 25),
    );

    $form['magento_customers_sync_limit'] = array(
    '#type' => 'textfield',
    '#title' => t('Sync limit'),
    '#description' => t('Limit customers count for synchronization. Useful for debug of initial/test synchronization.'),
    '#default_value' => variable_get('magento_customers_sync_limit', 1000),
    );

    return system_settings_form($form);
}

/**
 * @deprecated
 */
/*
function magento_customers_synchronize_customer_by_cron() {
    magento_customers_synchronize_customers(FALSE);
}
 */
/*
function magento_customers_synchronize_customers($gui = TRUE) {
    $include          = drupal_get_path('module', 'magento_customers') .'/magento_customers_batch.inc';
    $function_process = 'magento_customers_fetch_batch_create';
    $function_before  = "magento_customers_fetch_batch_get"; // use custom function to fetch Customers

    $batch = array();
    //$stores = magento_synchronize_get_stores_for_synchronization(TRUE);
    // One batch operation for each store
    $batch[] = array($include, $function_process, $function_before, array());

    // Batch info
    $info = array(
    'title'        => t('Synchronization of Customers'),
    'init_message' => t('Start processing'),
    );

    // Submit batch
    magento_batch_process($info, $batch, $gui);

    variable_set('magento_customers_last_sync_date', time());
}
 */

function magento_customers_synchronize_customers_to_magento($gui = TRUE) {
    $include          = drupal_get_path('module', 'magento_customers') .'/magento_customers_batch.inc';
    $function_process = 'magento_customers_send_batch_create';
    $function_before  = "magento_customers_send_batch_get"; // use custom function to fetch Customers

    $batch = array();
    //$stores = magento_synchronize_get_stores_for_synchronization(TRUE);
    // One batch operation for each store
    $batch[] = array($include, $function_process, $function_before, array());

    // Batch info
    $info = array(
    'title'        => t('ReSynchronization of Customers'),
    'init_message' => t('Start processing')
    );

    // Submit batch - we use non-GUI mode when running under Elysia Cron
    magento_batch_process($info, $batch, $gui);
    //magento_batch_process($info, $batch, $gui);
}

function magento_customers_synchronize_customer($customer, $account = NULL) {
    global $_magento_customers_initiative_customers;

    if (!isset($_magento_customers_initiative_customers)) {
        $_magento_customers_initiative_customers = array();
    }

    if ($customer && is_array($customer)) {
        //check if we have mail to sync customer by it
        // if ($customer[MAGENTO_CUSTOMERS_PROFILE_MAGENTO_EMAIL_FIELD]) {
        if ($customer[MAGENTO_CUSTOMERS_PROFILE_MAGENTO_EMAIL_FIELD]) {
            if (!isset($account) || !isset($account->uid)) {
                $_magento_customers_initiative_customers[] = $customer[MAGENTO_CUSTOMERS_PROFILE_MAGENTO_EMAIL_FIELD];
                //try to find user by Magento customer ID
                if (!empty($customer['customer_id'])) {
                    $user = user_load(array('customer_id' => $customer['customer_id']));
                }
                //try to find user by email
                $user = NULL;
                if (trim($customer[MAGENTO_CUSTOMERS_PROFILE_MAGENTO_EMAIL_FIELD])) {
                    $user = user_load(array('mail' => $customer[MAGENTO_CUSTOMERS_PROFILE_MAGENTO_EMAIL_FIELD]));
                }
            }
            else {
                $user = $account;
            }

            if ($user) {
                $role = magento_customers_get_role($customer[MAGENTO_CUSTOMERS_PROFILE_MAGENTO_GROUP_ID_FIELD]);
                $all_associaded_roles = magento_customers_get_associated_roles();
                if (in_array($role, $all_associaded_roles)) {
                    //group is associated with Drupal role, so leave only one Magento Group role,
                    //but we should leave also other Drupal roles
                    $current_roles = array_keys($user->roles);
                    //here we have only Drupal roles, non assiciated with Magento Groups
                    $new_roles = array_diff($current_roles, $all_associaded_roles);
                    //add new Magento Group associated role
                    $new_roles[] = $role;
                    $user = user_save($user, array('roles' => $new_roles));
                }

                // Load User profile(s) and update it or create new
                // set user fields from customer data
                $user_data = array('customer' => $customer);
                if (empty($user->customer_id) && !empty($customer['customer_id'])) {
                  $user_data['customer_id'] = $customer['customer_id'];
                }

                $user = user_save($user, $user_data);
            }
            // New user, create it
            else {
                $account = new stdClass();
                $field_name_data = array();
                foreach (variable_get('MAGENTO_CUSTOMERS_PROFILE_NAME_COMBINE', array('firstname', 'lastname')) as $name_field) {
                  $field_name_data[] = $customer[$name_field];
                }
                /*
                if (!$role) {
                  $role = NULL;
                }
                */

                $user_name = trim(implode(MAGENTO_CUSTOMERS_PROFILE_NAME_COMBINE_DELIMETER, $field_name_data));
                // check user name uniques
                $res = db_result(db_query("SELECT COUNT(name) FROM {users} WHERE name='%s'", $user_name));
                if (!empty($res)) {
                  $user_name .= MAGENTO_CUSTOMERS_PROFILE_NAME_COMBINE_DELIMETER . (intval($res) + 1);
                }
                //

                $user_data = array(
                  'name' => $user_name,
                  'created' => strtotime($customer[MAGENTO_CUSTOMERS_PROFILE_MAGENTO_CREATED_FIELD]),
                  'mail' => $customer[MAGENTO_CUSTOMERS_PROFILE_MAGENTO_EMAIL_FIELD],
                  'status' => 1,
                  //'data' => array('customer' => $customer),
                  'customer' => $customer,
                );

                if (!empty($customer['customer_id'])) {
                  $user_data['customer_id'] = $customer['customer_id'];
                }

                if (empty($user_data['name'])) {
                  watchdog('magento_customer', "Failed to synch Magento customer with %email", array('%email' => $customer[MAGENTO_CUSTOMERS_PROFILE_MAGENTO_INIT_EMAIL_FIELD]));
                  return FALSE;
                }

                $user = user_save($account, $user_data);
            }
            //update passwords to already hashed from Magento
            if (isset($customer[MAGENTO_CUSTOMERS_PROFILE_PASSWORD_HASH_FIELD])) {
                magento_customers_save_hashed_passwords($user->uid, $customer[MAGENTO_CUSTOMERS_PROFILE_PASSWORD_HASH_FIELD]);
            }
        }
    }
    return $user ? $user : FALSE;
}

/**
 * Update user password with new hash
 * @param $uid
 *   User uid
 * @param $hash
 *   New password hash
 */
function magento_customers_save_hashed_passwords($uid, $hash) {
  $result = db_query("UPDATE {users} SET pass = '%s' WHERE uid = %d", array($hash, $uid));
  return $result;
}

/**
 * Cron task 'magento_customers_synchronize_customer_by_cron_to_magento'.
 * Get recently updated customers from Drupal to Magento.
 */
function magento_customers_synchronize_customer_by_cron_to_magento() {
    magento_customers_synchronize_customers_to_magento(FALSE);
}

/**
 * Get Drupal users count. If $date is set, then filter users by last updated date.
 */
function _magento_customers_get_users_count($date = NULL) {
    $query = "SELECT count(uid) as cnt FROM {users} WHERE uid > 1 ";
    if ($date === NULL) {
        $results = db_query($query);
    }
    else {
        $query .= ' AND created > %d ';
        $results = db_query($query, $date);
    }
    $return = db_fetch_array($results);
    return $return['cnt'];
}

function _magento_customers_get_users_list($date=NULL, $offset = 0, $limit = 25) {
    $query = "SELECT * FROM {users} WHERE uid > 1 ";
    $params = array();
    if ($date !== NULL) {
        $query .= ' AND created > %d ';
        $params[] = $date;
    }
    $query .= " ORDER BY created DESC ";
    $query .= " LIMIT %d, %d ";
    $params[] = $offset;
    $params[] = $limit;
    $customers = array();
    $result = db_query($query, $params);
    while ($user = db_fetch_array($result)) {
        if (empty($user['mail'])) {
          continue;
        }

        $data = unserialize($user['data']);
        if (isset($data['customer'])) {
            $customer = $data['customer'];
            $customer['uid'] = $user['uid'];

            if (empty($customer['email'])) {
                $customer['email'] = $user['mail'];
            }
            if (empty($customer['init_email'])) {
                $customer['init_email'] = $user['init'];
            }
            if (empty($customer['pass'])) {
                $customer['pass'] = $user['pass'];
            }

            $customers[] = $customer;
        }
    }

    return $customers;
}

function _magento_customers_load_users_for_sync($uids) {
    $result = array();
    if (is_array($uids)) {
        foreach ($uids as $uid) {
            $data = _magento_customers_load_user_for_sync($uid);
            if ($data !== NULL) {
                $result[] = $data;
            }
        }
    }
    return $result;
}

function _magento_customers_load_user_for_sync($account) {
    if ($account->uid) {
        if (empty($account->mail)) {
            //TODO: add setting for this
            watchdog('magento_customers', "Trying to sync user without email. (UID: {$account->uid})", NULL, WATCHDOG_NOTICE);
            return NULL;
        }
        if ($account->data) {
            $data = unserialize($account->data);
            if (isset($data['customer'])) {
                $customer = $data['customer'];
                $customer['init_email'] = $account->init;
                return $customer;
            }
            else {
                //TODO: add setting for this
                watchdog('magento_customers', "Trying to sync user without customer info. (UID: {$account->uid})", NULL, WATCHDOG_NOTICE);
                return NULL;
            }
        }
        else {
            //TODO: add setting for this
            watchdog('magento_customers', "Trying to sync user without user data. (UID: {$account->uid})", NULL, WATCHDOG_NOTICE);
            return NULL;
        }
    }
    else {
        //TODO: add setting for this
        //watchdog('magento_customers', "Trying to sync user without uid.",NULL, WATCHDOG_NOTICE);
        return NULL;
    }
}

/**
 * Process synchronization result from Magento.
 * Here we update Magento ID fields within Drupal nodes for new instances.
 */
function _magento_customers_process_sync_result($data) {
    $success = array();
    $error = array();
    if (is_array($data) && is_array($data['data'])) {
        foreach ($data['data'] as $response) {
            if ($response['success'] !== FALSE) {
                $success[] = $response;
                switch ($response['operation']) {
                    // customer was updated in Magento
                    //TODO: addresses checks required !!!
                    case 'update':
                        //  no need to do something, yet
                        break;
                        // customer was updated in Magento, but customer was found by email, not by Magento ID
                        // need to update Magento ID field in Drupal
                    case 'update_by_mail':
                        // new customer have been created in Magento
                        // need to update Magento ID field in Drupal
                        //TODO: why we need this now ?
                    case 'create':
                        if ($response['success'] && $response['id']) {
                            $uid = $response['data']['uid'];
                            if ($uid) {
                                $account = user_load($uid);
                                if ($account->data) {
                                    unset($response['data']['uid']);
                                    $customer = $response['data'];

                                    $addresses = array();
                                    if (!empty($response['address']) && is_array($response['address'])) {
                                      foreach ($response['address'] as $address) {
                                        $addresses[] = $address;
                                      }
                                    }
                                    $customer['addressses'] = $addresses;

                                    $user_data = array(
                                      'customer_id' => $response['id'],
                                      'customer' => $customer,
                                    );

                                    $user = user_save($account, $user_data);
                                }
                          }
                        }
                        break;
                }
            }
            else {
                $error[] = $response;
                //error occurs while Magento process this customer data
                //no need to do something
                continue;
            }
        }
    }
    return array('global_status' => $data['global_status'], 'success' => count($success), 'error' => count($error));
}

/**
 * Returns user's magento customer data
 */
function _magento_customers_load_user_data_customer($account) {
    if ($account->data) {
        $data = unserialize($account->data);
        if (isset($data['customer'])) {
            $customer = $data['customer'];
            return $customer;
        }
    }
    return NULL;
}

/**
 * Returns magento customer addresses array
 */
function magento_customers_get_customer_addresses(&$account, $customer_address_id = FALSE) {
  //ANONYMOUS customer
  if (empty($account->uid)) {
    if (!isset($_SESSION['addresses'])) {
      $_SESSION['addresses'] = array();
    }
    if (FALSE !== $customer_address_id) {
      return isset($_SESSION['addresses'][$customer_address_id]) ? array($_SESSION['addresses'][$customer_address_id]) : array();
    }
    return $_SESSION['addresses'];
  }

  //REAL customer
  if (empty($account->customer)) {
    $account->customer = _magento_customers_load_user_data_customer($account);
  }
  if (isset($account->customer['addresses'])) {
    // add filter if required
    if (!empty($customer_address_id)) {
      foreach ($account->customer['addresses'] as $address) {
        if ($address['customer_address_id'] == $customer_address_id) {
          return array($address);
        }
      }
      return array();
    }

    return $account->customer['addresses'];
  }

  return array();
}

/////////////////// CUSTOMER AND CART //////////////////////////////////
/**
 * Retrieve current Magento website Id
 */
function magento_customers_get_current_website() {
  static $website;
  if (!empty($website)) {
    return $website;
  }

  $website_nid = magento_structure_website_nid();
  if ($website_nid) {
    $website_node = node_load($website_nid);

    //field_magento_id_value
    if (isset($website_node->field_magento_id[0]['value'])) {
      $website = $website_node->field_magento_id[0]['value'];
      return $website;
    }
    return FALSE;
  }

  return FALSE;
}

/**
 * Render identification step.
 */
function magento_customers_quote_step_identification() {
  global $user;

  // Get next step path.
  $next_step = magento_cart_get_step_next();
  $next_path = magento_cart_get_step_path($next_step);

  // Goto /user if uid=0 or to the next step.
  if (($user->uid == 0 && empty($_GET['anonymous'])) ) {
    drupal_goto('user', array('destination' => $_GET['q']));
  }
  else {
    $_SESSION['anonymous_checkout'] = TRUE;
    magento_cart_goto_step($next_step);
  }
}

/**
 * Ckecks whether anonymous checkout is allowed or not.
 * @return bollean
 *   TRUE if allowed, FALSE - otherwise.
 */
function magento_customers_is_allowed_anonymous_checkout() {
  $result = magento_api_get_config_info('checkout/options/guest_checkout', magento_customers_get_current_website(), MAGENTO_CUSTOMER_ANONYMOUS_TTL_ALLOWED);
  if (!empty($result)) {
    return TRUE;
  }
  return FALSE;
}

/////////////////// GROUPS AND ROLES ///////////////////////////////////
/**
 * Display a form for roles propagation.
 *
 * @param $form_state
 *   The form state array.
 * @return
 *   An array containing the form elements to be displayed.
 */
function magento_customers_roles_propagation($form_state) {
    $groups = magento_api_customer_group_list();
    if ($groups) {
        $opts = array('' => t('--ROLE NOT ASSIGNED--'));
        foreach ($groups as $group) {
            $opts[$group['customer_group_id']] = $group['customer_group_code'];
        }

        $form['description'] = array(
          '#value' => t('You can associate every Drupal role with some Magento Customer group:') . '<br/>',
        );
        $roles = user_roles();
        foreach ($roles as $id => $role) {
            $form[$id]['drupal_role'] = array(
            '#value' => $role,
            );
            $form[$id]['magento_groups_' . $id] = array(
            '#type' => 'select',
            '#options' => $opts,
            '#default_value' => magento_customers_get_group($id),
            );
        }
        $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Save'),
        '#submit' => array('magento_customers_roles_propagation_form_submit'),
        );

        $form['#submit'] = array('magento_customers_roles_propagation_form_submit');
        return $form;
    }
    else {
        drupal_set_message(t('Error occurs while receiving group list'), 'error');
    }
}

/**
 * Save association between Drupal user roles and Magento user groups
 *
 * @param $form_state
 *   The form state array.
 * @param $form
 *   Form array.
 *
 */
function magento_customers_roles_propagation_form_submit($form, &$form_state) {
    $roles = user_roles();
    foreach ($roles as $id => $role) {
        $results = db_query("SELECT * FROM {magento_groups} WHERE role_id =%d", $id);
        // Create association if not exists or update it if exists
        if (db_fetch_array($results) == FALSE) {
            //insert only if we choose group to associate
            if ($form_state['values']['magento_groups_' . $id] !== '') {
                $result = db_query("INSERT INTO {magento_groups} (role_id,group_id) VALUES ('%d','%d')", $id, $form_state['values']['magento_groups_' . $id]);
            }
        }
        else {
            //update only if we choose group to associate
            if ($form_state['values']['magento_groups_' . $id] !== '') {
                $result = db_query("UPDATE {magento_groups} SET group_id = %d WHERE role_id =%d", $form_state['values']['magento_groups_' . $id], $id);
                //else, delete association
            }
            else {
                $result = db_query('DELETE FROM {magento_groups} WHERE role_id = %d', $id);
            }
        }
    }
}

/**
 * Get Magento group by Drupal role
 *
 * @param $id
 *   ID of Drupal role.
 * @return
 *   ID of Magento group.
 *
 */
function magento_customers_get_group($id) {
    if (is_numeric($id)) {
        $results = db_query("SELECT group_id FROM {magento_groups} WHERE role_id = %d", $id);
        $return = db_fetch_array($results);
        if (isset($return['group_id'])) {
            return $return['group_id'];
        }
    }
    return FALSE;
}

/**
 * Get Drupal role by Magento group
 *
 * @param $id
 *   ID of Magento group.
 * @return
 *   ID of Drupal role.
 *
 */
function magento_customers_get_role($id) {
  if (is_numeric($id)) {
    $results = db_query("SELECT role_id FROM {magento_groups} WHERE group_id = %d", $id);
    $return = db_fetch_array($results);
    return $return['group_id'];
  }
  else {
    return FALSE;
  }
}

/**
 * Get all Drupal roles assiciated with Magento groups
 *
 * @param $id
 *   ID of Magento group.
 * @return
 *   ID of Drupal role.
 *
 */
function magento_customers_get_associated_roles() {
    $result = db_query("SELECT role_id FROM {magento_groups}");
    while ($role = db_fetch_object($result)) {
        $roles[] = t($role->role_id);
    }
    return $roles;
}

/**
 * Get Magento customer group of Drupal user
 *
 * @param $user
 *   Object user.
 * @return
 *   ID of Magento customer group.
 *
 */
function magento_customers_get_user_group($user) {
    if (empty($user->roles) || !is_array($user->roles)) {
      return NULL;
    }
    $key = array_keys($user->roles);
    // If user have only authenticated or anonymous user role
    if (count($key) == 1) {
        $customer_group = magento_customers_get_group($key[0]);
    }
    else {
        // if user have more than 1 role
        foreach ($key as $id => $value) {
            if ($value == DRUPAL_AUTHENTICATED_RID) continue;
            else {
                $customer_group = magento_customers_get_group($key[$id]);
                break;
            }
        }
    }
    return $customer_group;
}

/**
 * Determines if Magento customer related data has changed or not
 * @param $edit - array of customer data that has changed ( passed from hook_user )
 *
 * @return boolean
 */
function magento_customer_has_changed($edit) {
  if (!is_array($edit)) {
    return FALSE;
  }

  // IF Magento cart has changed We don't need to update Magento Cyustomer
  unset($edit['magento_cart']);
  return !empty($edit);
}

function _magento_customers_get_group_for_anonym() {
    $query = db_query('SELECT group_id FROM {magento_groups} WHERE role_id = %d', DRUPAL_ANONYMOUS_RID);
    $group = db_fetch_array($query);
    
    return $group['group_id'];
}