<?php

/**
 * Implementation of hook_init()
 */
function drupento_auth_init() {

  	module_load_include('inc', 'drupento', 'drupento');
  	module_load_include('class.php', 'drupento', 'Drupento');  	
}

/**
 * Implementation of hook_cron()
 */
function drupento_auth_cron() {
	variable_del('drupento_auth_registration_fields');
}

/**
 * Implementation of hook_menu()
 */
function drupento_auth_menu() {
	$items = array();
	$items['drupento/get/session-name'] = array(
			'title' => 'Get Session',
			'page callback' => 'drupento_get_session_name',
			'access arguments' => array('access content'),
			'type' => MENU_CALLBACK
	);

	$items['drupento/check/email'] = array(
			'title' => 'Settings',
			'page callback' => 'drupento_check_email',
			'access arguments' => array('access content'),
			'type' => MENU_CALLBACK
	);
		
	return $items;
}

/**
 * Remote resource used to check if an email address already exists in the system
 */
 function drupento_check_email() {
 	$email = $_POST['email'];
 	echo db_result(db_query('SELECT COUNT(*) FROM {users} WHERE mail = "%s" AND uid > 0', $email));
 }

/**
 * Remote resource used to get the session name across systems
 */
function drupento_get_session_name() {
	global $user;

	$sess_name = session_name();
	echo $sess_name;
	exit;
}

/**
 * Determine if the authentication module needs to act
 */
function drupento_auth_is_responsible_for_authenticating( $username ) {
	// We should be sure the user's authentication is tied to this module
	// so we check the user against the authmap table
	$result = db_query("SELECT module FROM {users}
						JOIN {authmap} ON {users}.uid = {authmap}.uid
	                    WHERE {users}.name = '%s' LIMIT 1", addslashes( $username ) );

	$row = db_fetch_array($result);
	if ($row && $row['module'] == 'drupento_auth') {
	    return true;
	}
	
	return false;
}

/**
 * Implementation of hook_FORM_alter()
 */
function drupento_auth_form_user_login_alter(&$form, $form_state) {    
	array_unshift($form['#validate'], '_drupento_auth_validate');		
}

/**
 * Implementation of hook_FORM_alter()
 */
function drupento_auth_form_user_login_block_alter(&$form, $form_state) {
    drupento_auth_form_user_login_alter($form, $form_state);
}

function drupento_customer_login($email, $password, $store = null ) {
	if($store === null) {
		$store = variable_get('drupento_magento_store_code', 'default');
	}
	
	$valid_user = Drupento::Call('drupento_customer.login', array( $email, $password, $store ));
	if( isset($valid_user) && $valid_user && is_array($valid_user)) {
		return $valid_user;
	}
	return false;
}

/**
 * Destroy magento session on logout
 */
function _drupento_auth_logout() {
	setcookie('frontend', '', time() - 86000, '/', variable_get('drupento_cookie_domain', ''));
}

/**
 * Login form validation
 */
function _drupento_auth_validate(&$form, $form_state) {
    $email = $form['name']['#value'];
    $pass = $form['pass']['#value'];

    $external_login = false;
    // First, we try to authenticate against the drupal users table

    $user = user_load(array('name' => $email ));

    if ($user === false || $user->uid = 0) {
        // if that fails (user not in drupal users table), we will try to validate the login
        // form against an outside authentication script
        $external_login = true;
    }
    else if ( drupento_auth_is_responsible_for_authenticating( $email ) ) {
        // this user authenticates with this module, so we will proceed with adding the callback        
        $external_login = true;
    }

	if( variable_get('drupento_force_external_auth', false) && preg_match('/[@]/', $email)) {
		$external_login = true;
	}

	if( $external_login ) {
       	unset($form['#submit']);

		// run the authentication function
		if (_drupento_auth_external_login($email, $pass)) {
			drupal_goto('home');
		}
		else {
			// failed authentication, let the form handle the error
			$form_state['#validate'] = array();
			$form_state['#submit']  = array();
			form_set_error('name', t("The username and password you entered is incorrect"));
		}
	}
}

/**
 * Implementation of hook_FORM_alter - allows for drupal => magento user creation
 */
function drupento_auth_form_alter(&$form, $form_state, $form_id) {
	switch ($form_id) {
		case 'user_register':
			// First & Last name are required
			$account_info = array(
			    '#type' => 'fieldset',
			    '#title' => t('Account Information'),
			    '#weight' => -100
			);
			
			$weight = 0;
			$account_info['firstname'] = array(
				'#type' => 'textfield',
				'#title' => 'First Name',
				'#maxlength' => 60,
				'#required' => true,
				'#weight' => $weight
			);
			
			$weight++; 
			$account_info['lastname'] = array(
				'#type' => 'textfield',
				'#title' => 'Last Name',
				'#maxlength' => 60,
				'#required' => true,
				'#weight' => $weight
			);
			
			$additional_fields = module_invoke_all('registration_fields', &$account_info);
			foreach( $additional_fields as $id => $field ) {
				$weight++;
				$additional_fields[$id]['#weight'] = $weight;
			}

			$account_info = array_merge($account_info, $additional_fields);
			
			if( !variable_get('drupento_auth_registration_fields', null) ) {
				variable_set('drupento_auth_registration_fields', array_keys($account_info));
			}
									
			// use uniqid() here to create a temporary username
			if (isset($form['account']) && is_array($form['account'])) {
				$form['account']['account_info'] = $account_info;			
				$form['account']['name']['#type'] = 'hidden';
				$form['account']['name']['#value'] = uniqid();
				$form['account']['mail']['#title'] = t('E-mail');				
			}
			else {
				$form['account_info'] = $account_info;			
				$form['name']['#type'] = 'hidden';
				$form['name']['#value'] = uniqid();
				$form['mail']['#title'] = t('E-mail');								
			}

			// add a submit callback to update username => email
		    $form['#submit'][] = 'drupento_auth_registration_name_submit';			
			break;
			
		case 'user_pass':
			$form['name']['#title'] = t('E-mail');
			$form['name']['#description'] = t('Enter your e-mail address. You\'ll be sent a new password immediately.');
			break;

		case 'user_login':
			$form['name']['#title'] = t('E-mail');
			$form['name']['#description'] = t('Enter your e-mail address.');
			$form['pass']['#description'] = t('Enter your password');
			$form['name']['#element_validate'][] = 'drupento_auth_user_login_validate';
			break;

		case 'user_login_block':
			$form['name']['#title'] = t('E-mail');
			$form['name']['#element_validate'][] = 'drupento_auth_user_login_validate';
			break;		
		
		case 'user_profile_form':
			array_unshift($form['#submit'], 'drupento_auth_update_username', 'drupento_auth_account_sync_push');
			break;
	}
}

/**
 * Submit callback - pushes out any updates to the user account
 */
function drupento_auth_account_sync_push($form, &$form_state) {	
	$user = user_load(array('uid' => $form['#uid']));	
	$post = $form['#post'];
	$pass = $post['pass'];
	
	$mage_cust = drupento_auth_mage_customer($user);

	if( $mage_cust && count($mage_cust) ) {

		// we have an array here, so get the current (and only) element
		$mage_cust = current($mage_cust);
		$mage_cust_id = $mage_cust['customer_id'];

		$update = array();
		if( isset($pass['pass1']) && strlen($pass['pass1']) && isset($pass['pass2']) && ($pass['pass1'] == $pass['pass2']) ) {
			$update['password_hash'] = md5($pass['pass1']);
		}
		
		$update['email'] = $post['mail'];
		Drupento::Call('customer.update', array($mage_cust_id, $update));
		
		// after the password change, ensure the customer is logged in
		drupento_customer_login($post['mail'], $pass['pass1']);		
	}
}

/**
 * Submit callback - updates the username with the email address
 */
function drupento_auth_update_username($form, &$form_state) {
	$user = user_load(array('uid' => $form['#uid']));
	$post = $form['#post'];
	// dont ever do this for admin
	if( $user->uid > 1 ) {
		$email = $post['mail'];
		$update = db_query('UPDATE {users} SET name = "%s" WHERE uid = %d ', $email, $user->uid);		
	}
}

/**
 * Gets the user_id of the Magento user associated with this account
 */
 function drupento_auth_mage_customer($user) {
 	if( $user->mail ) {
		$lookup = array();
		$lookup['email'] = $user->mail;
		$customer = Drupento::Call('customer.list', array($lookup));
		if( count($customer) ) {
			return $customer;
		}
 	}
 	 	
	return false;
 }

/**
 * Delete the Magento user associated with this account
 */
 function drupento_auth_delete_magento_customer($account) {
 	if( $account->mail ) {
		$customer = drupento_auth_mage_customer($account);		
		if( is_array($customer) && count($customer) ) {
			$customer = current($customer);
			if($customer['customer_id'] > 0) {
				Drupento::Call( 'customer.delete', array($customer['customer_id']) );
			}
		}
 	}
 	
 	return false;
 }
 
 /**
 * Submit callback for name
 */
function drupento_auth_registration_name_submit($form, &$form_state) {
	if (!isset($form_state['user'])) {
		return;
	}

	$admin = user_access('administer users');
	$account = $form_state['user'];

	if (!variable_get('user_email_verification', TRUE) && $account->status && !$admin) {
		// No e-mail verification is required, create new user account, and login
		// user immediately.
		$auth = array(
			'pass' => $form_state['values']['pass'],
			'name' => $account->name,
		);

		if (user_authenticate($auth)) {
			// Authenticated, add a message and go to the users account
			// Since the standard workflow doesn't work, no other messages should appear.
			drupal_set_message(t('Registration successful. You are now logged in.'));
			$form_state['redirect'] = 'user/'. $account->uid;
		}
	}
}

/**
 * Login validation
 */
function drupento_auth_user_login_validate($form, &$form_state) {
	if (isset($form_state['values']['name'])) {
		if ($name = db_result(db_query("SELECT name FROM {users} WHERE LOWER(mail) = LOWER('%s')", $form_state['values']['name']))) {
			$form_state['values']['name'] = $name;
		}
	}
}

/**
 * Implementation of hook_user
 * Some code on loan from chris herberte's email_registration module
 */
function drupento_auth_user($op, &$edit, &$account, $category = NULL) {
	switch ($op) {
		case 'logout':
			_drupento_auth_logout();
			drupal_goto();	
			break;  
		case 'insert':
			// we only want to do this when the registration form is submitted,
			// but this gets called on user_external_login_register() as well
			if( isset($edit['form_build_id']) && $edit['form_build_id'] ) {

				// replace username with email and add an auth mapping
				if (db_query("UPDATE {users} SET name = '%s' WHERE uid = '%s'", $account->mail, $account->uid)) {
					$edit['name'] = $account->mail; // update in the user array for access by other modules
					$authmap = db_query('INSERT INTO {authmap} VALUES(NULL, %d, "%s", "drupento_auth")', $account->uid, $account->mail);
				}
				
				// if email verification is off and a new user is the one creating account, log the new user in with correct name
				global $user;
				if (!variable_get('user_email_verification', 1) && $user->uid == 0) {
					$user = $account;
					$user->name = $account->mail;
				}

				$account->name = $account->mail;
				_drupento_auth_register_magento_user(&$edit, &$account);						
			}
			break;
		case 'delete':
			drupento_auth_delete_magento_customer($account);
			break;
		default:
			break;	
	}
	return;
}

/**
 * Registration callback
 */
function _drupento_auth_register_magento_user( &$edit, &$account ) {
	$store_id = variable_get('drupento_magento_store_id', null);
	$website_id = variable_get('drupento_magento_website_id', null);

	// THIS WILL ONLY BE CALLED IF THE ADVANCED OPTIONS ARE NOT SET
	// THIS REQUIRES DRUPAL AND MAGENTO TO BE ON THE SAME DB
	if(!$store_id || !$website_id) {
		// this allows a developer to inject a custom store code to create the user against
		$store_code = variable_get('drupento_auth_override_store_code_create', null);
		if( !$store_code ) {
			// no override, get the code set in drupento options, otherwise use 'default'
			$store_code = variable_get('drupento_magento_store_code', 'default');
		}
		
		$store_lookup = db_fetch_object(db_query('SELECT * from {core_store} WHERE code = "%s"', $store_code));				
		$store_id = $store_lookup->store_id;
		$website_id = $store_lookup->website_id;
	}

	$account_details = array(
		'email'      		=> $account->mail,
		'password_hash'		=> md5($edit['pass']),
		'store_id'   		=> $store_id,
		'website_id' 		=> $website_id
	);
	
	$additional_details = drupento_auth_get_registration_additional_fields_array( $edit );
	$account_details = array_merge($account_details, $additional_details);

	// SOAP call to create the user
	$created = Drupento::Call('customer.create', array($account_details));	
	if( !is_numeric($created) ) {
		drupal_set_message(t('There was a problem fully creating your customer account. Please contact a site administrator'));
	}
}

/**
 * Grabs all registration fields defined by modules
 */
function drupento_auth_get_registration_additional_fields_array( $edit ) {
	$fields = variable_get('drupento_auth_registration_fields', array());
	$ret = array();
	foreach( $fields as $idx => $name ) {
		$ret[$name] = $edit[$name];
	}
	
	return $ret;
}

function _drupento_auth_external_login($email, $pass) {
	watchdog('status', 'starting external login');

    if ($valid_user = drupento_customer_login($email, $pass)) {		
		watchdog('status', 'User is valid');
		
		// this function is very important - it will register the external user
	    // with Drupal if necessary, and log in the user afterward
		user_external_login_register($email, 'drupento_auth');

		global $user;
		
		// sync the email address from magento (mage login)		
		if( $user->mail != $valid_user['email']) {
			$user->mail = $valid_user['email'];
			user_save((object) array('uid' => $user->uid), (array) $user);		
		}
		
		// assign the user to a role based on their magento customer group name
		$role_name = $valid_user['customer_group'];
		watchdog('status', 'Role name: ' . $role_name);

		_drupento_auth_auto_assign_role($user, $role_name);
		return true;
	}
	return false;
}

function _drupento_auth_get_role_name($name, $prefix = "") {
	return $prefix . " " . $name;
}

function _drupento_auth_auto_assign_role($user, $role_name, $break = false) {
	require_once(drupal_get_path('module', 'user') . "/user.admin.inc");
	watchdog('status', 'Auto-assigning role');
	// check if the role exists by name
	$role_name = trim(_drupento_auth_get_role_name($role_name));
	$result = db_query("SELECT * FROM {role} WHERE name = \"{$role_name}\"");
	if( $role = db_fetch_object($result) ) {

		// role exists, assign the user to it
		_drupento_auth_add_user_to_role($user, $role->rid);
		watchdog('status', 'role exists, adding user to it');
	}
	else {
		watchdog('status', 'role does not exist');

		$rid = _drupento_auth_add_new_role($role_name);
		_drupento_auth_add_user_to_role($user, $rid);
	}

	return true;
}

function _drupento_auth_add_new_role($role_name) {	
	$form_id = "user_admin_new_role";
	
	$form_values = array();
	$form_values["name"] = $role_name;
	$form_values["op"] = t('Add role');
	
	$form_state = array();
	$form_state["values"] = $form_values;
	drupal_execute($form_id, $form_state);
	
	$result = db_query("SELECT * FROM {role} WHERE name = \"{$role_name}\"");
	$role = db_fetch_object($result);
	
	return $role->rid;
}

function _drupento_auth_add_user_to_role($user, $rid) {
	$uid = $user->uid;
		if ($uid <= 0 || $rid <= 0) {
		return false;
	}

	$count = db_result(db_query("SELECT COUNT(uid) FROM {users_roles} WHERE uid = %d AND rid = %d", $uid, $rid));
	if ($count == 0) {
		$result = db_query("INSERT INTO {users_roles} (uid, rid) VALUES (%d, %d)", $uid, $rid);
		return $result;
	}
	else {
		return true;
	}

	return false;
}

