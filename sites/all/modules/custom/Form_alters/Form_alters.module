<?php
/*function miKrumo($var){
	 if (!function_exists('krumo')){
	 include_once  drupal_get_path('module', 'devel'). '/krumo/class.krumo.php';
			}
	echo "<div id='krumoDiv'>	";	
	krumo($var);
	echo"</div>";
}*/
/**
* Implementation of hook_elements().
*
* This extends optionwidgets_elements() to add in additional processing.
* Note that your module must be weighted higher than optionwidgets
* for this code to take effect.
*/
/******************************************** quitar N/D o N/A de opciones !!!!!!! **************/
function Form_alters_elements() {
  $type['optionwidgets_buttons']['#process'][] = 'remove_radio_na';
  return $type;
}

/**
* Unset the N/A option on option widget radio buttons.
*/
function remove_radio_na($element) {
  unset($element['value']['#options']['']);
  return $element;
}





function Form_alters_init(){
	//echo "<h1> Form_alters_form_alter Form_alters_init</h1>"; 
	}

function Form_alters_form_alter(&$form, &$form_state, $form_id) {
 

 if (isset($form_id) && $form_id == "perfil_usuario_node_form") {
	 //
//miKrumo($form);
	 unset($form['locale']);
	 unset($form['theme_select']);
	 unset($form['timezone']);
	 unset($form['status']);
	 unset($form['roles']);
	  unset($form['picture']);
	// $form['buttons']['previous']['#validate' ]=array();
	//'#validate' => array(),
	//krumo(_multistep_get_current_step($type)); 
	//drupal_set_message( krumo($form) ); 
	
	// el hierarchicAL select riompia la validacion,contaba como oblñigatorio en paso 1 a pesar de estar en paso 2
	$type = $form['#node']->type;
	$step=_multistep_get_current_step($type);
 	if($step==2){
		// unset($form['taxonomy']);
		$form['taxonomy'][3]['#required']=1;
	}
	else{$form['taxonomy'][3]['#required']=0; }
	
	// legal en paso 3 obliogatorio, rompe validación
	/*if($step==3){
		// unset($form['taxonomy']);
		$form['legal']['legal_accept']['#required']=1;
	}
	else{$form['legal']['legal_accept']['#required']=0; }*/
	// como hay registro que redirige a content profile, me cargo el legal
	unset($form['legal']);
	
	
	// para boton anterior
	array_unshift($form['#after_build'], 'Form_alters_form_after_build');
	// $form['#after_build'][] = 'Form_alters_form_after_build';

   //krumo($form);


 }
 //pageutopicus_node_form
 if (isset($form_id) && $form_id == "pageutopicus_node_form") {
	// miKrumo($form);
	 $form['body_field']['body']['#prefix'] = "<div class='bodyhelp help '>".t('Crear "Tabs" y "Cajas" en los campos de abajo. Introducir [cajas] y/o [tabs] en el cuerpo para que aparezcan en el lugar designado.<p>Para insertar un vídeo dentro de el cuerpo (en vez de utilizar la entrada para vídeo de más abajo), simplemente pegar la URL de YouTube o Vimeo. Por ejemplo "http://www.youtube.com/watch?v=PdDpJbbRZmQ".')."</div>";
	/* $form['body_field']['body']['#suffix'] = "<div class='help'>This site is moderated. Profane and sexually explicit content will be removed.</div>";*/
 }
 
 
 
 
 
  if (isset($form_id) && $form_id == "author_node_form") {
	  	
    if (is_array($form['taxonomy']['44'])) {
      //miKrumo($form['taxonomy']['44']["#options"]);
	  // loop through taxonomy form elements
      foreach ($form['taxonomy']['44']["#options"] as $k => $v) {
		if(is_object($v)) {
			// el nombre del término
			$item=reset($v->option);
			// si empieza por guión es de segundo mnivel, lo quitamos.
			if(substr($item,0,1)=="-"){
				unset($form['taxonomy']['44']["#options"][$k]);
				}
			}
        
      }
    }
  }
  //comment_form
  if (isset($form_id) && $form_id == "comment_form") {
	  
	 // krumo($form); 
	 $form['comment_filter']['comment']['#rows']='5';
	 $form['comment_filter']['comment']['#resizable'] = false;
	 unset($form['preview']);
	 $form['#parameters'][3]="<div id='tucomentario'>TU COMENTARIO</div>";
	 // krumo($form); 
  }
  
  

 
 
  
  if ($form_id == "user_register" || $form_id == "user_login" ) {	

}





  
   /* CAMBIAR FORMATO DE FECHA PARA LA AUTORÍA */
  if(isset($form['author']['date'])){
  $form['author']['date']['#description'] = t('Formato: dd-mm-aaaa. No cambiar para dejar fecha de publicación.', array('%time' => !empty($node->date) ? $node->date : format_date($node->created, 'custom', 'd-m-Y'))); 
  //$form['author']['date']['#default_value'] = "weweewwewe";
  if (isset($form['#node']->date)) {
    //$form['author']['date']['#default_value'] = format_date($form['#node']->date, 'custom', 'd-m-Y');
	$form['author']['date']['#default_value'] = format_date(strtotime($form['#node']->date), 'custom', 'd-m-Y');
  }

  } //fin isset($form['author']['date'];
  
  
  
 // poner drupal user asociado a a autor  autor se puede poner autor drupoal asociado. Así el blogero no tiene que poner su autor al escribir, por defecto sale el asociado a su uid de usuario
if (isset($form_id) && $form_id == "blog_node_form") {

$nid=$form['uid']['#value'];
// si no hay autor definido, sacamos el autor del usuario, para blogeros!!
		if(!$form['field_op_author'][0]["#default_value"]['nid']){
		$result=db_query("SELECT * FROM {content_type_author} WHERE field_author_user_uid=%d LIMIT 1", $nid );
		while ($r = db_fetch_object($result)) {
		  $autorNID = $r->nid;
		  //krumo($r);
		}
		if($autorNID)$form['field_op_author'][0]["#default_value"]['nid']=$autorNID;
		}

  }
    

 
}


/*************************************   MULTISTEP ************/ 
function Form_alters_content_extra_fields($type_name) {
	//miKrumo($type_name);
  $fields['contact'] = array(
    'label' => t('User contact in profile'),
    'description' => t('User contact in profile'),
    'weight' => 30,
  );
  $fields['account'] = array(
    'label' => t('User account in profile'),
    'description' => t('User account in profile'),
    'weight' => -10,
  );
   /*$fields['picture'] = array(
    'label' => t('User picture in profile'),
    'description' => t('User picture in profile'),
    'weight' => -1, 
  );  */
   $fields['legal'] = array(
    'label' => t('Terms and conditions in profile'),
    'description' => t('Terms and conditions in profile'),
    'weight' => 100,
  );
  
  return $fields;
}



/*
 * After build handler
 */
function Form_alters_form_after_build($form, &$form_state) {
	
  if($form_state['clicked_button']['#id'] == 'edit-previous') {
    Form_alters_disable_validation($form);
	
  }
  //krumo($form);
  return $form;
}

function Form_alters_disable_validation(&$element) {
	//if($element['#type']=="hierarchical_select") krumo($element);
  unset($element['#needs_validation']);
   unset($element['#required']);
  foreach(element_children($element) as $key) {
    Form_alters_disable_validation($element[$key]);
  }
  //krumo($element);
 // if($element['#type']=="hierarchical_select") krumo($element);
}



    /**
     * Implementation of hook_form_FORM_ID_alter() for 'views exposed form'
     * Change the first option label '<All>' to 'Filter by Identifier Name' for exposed filters
     * The filter identifier needs set up with underscores for multiple word filter names
     * e.g. 'document_type' becomes 'Document Type'
     */
    /* 
    function Form_alters_form_views_exposed_form_alter (&$form, $form_state) {
	//krumo($form);
    foreach($form as $key => &$value) {
    if(isset($value['#options']['All'])) {
    $label = ucwords(strtolower(str_replace('_', ' ', $key)));
    $value['#options']['All'] = t('Filter by !label', array('!label' => $label));
    }
    }
    }*/
?>