diff --git a/wysiwygcck.js b/wysiwygcck.js
index 635e0e2..9c112e0 100644
--- a/wysiwygcck.js
+++ b/wysiwygcck.js
@@ -1,7 +1,7 @@
 
 /**
  * This module proposes that we add another method to the API for the editors used
- * in the wysiwyg module (wysiwyg/editors/js/*.js). Until we can count on those js 
+ * in the wysiwyg module (wysiwyg/editors/js/*.js). Until we can count on those js
  * files implementing it, we place some default implementations here.
  */
 Drupal.wysiwyg.editor.triggerSave.tinymce = Drupal.wysiwyg.editor.triggerSave.tinymce || function(context, params) {
@@ -11,6 +11,9 @@ Drupal.wysiwyg.editor.triggerSave.fckeditor = Drupal.wysiwyg.editor.triggerSave.
   var instance = FCKeditorAPI.GetInstance(params.field);
   instance.UpdateLinkedField();
 }
+Drupal.wysiwyg.editor.triggerSave.ckeditor = Drupal.wysiwyg.editor.triggerSave.ckeditor || function(context, params) {
+  Drupal.wysiwyg.editor.detach.ckeditor(context, params);
+}
 
 /**
  * Attach behavior to forms, so that prior to serializing during AJAX submit,
@@ -47,25 +50,25 @@ Drupal.wysiwygcck.triggerSave = function(context) {
  */
 Drupal.wysiwygcck.getInstances = function(context) {
   var result = null;
-  
+
   if (Drupal.wysiwyg && Drupal.wysiwyg.instances) {
     for (var id in Drupal.wysiwyg.instances) {
       var instance = Drupal.wysiwyg.instances[id];
       if (instance.status && jQuery('#' + id, context).length) {
         if (!result) {
           result = {};
-        }      
+        }
         result[id] = {};
         // Params should not include complex data types.
         for (var i in instance) {
-          if (jQuery.inArray(typeof(instance[i]), ['object', 'array', 'function']) == -1) { 
+          if (jQuery.inArray(typeof(instance[i]), ['object', 'array', 'function']) == -1) {
             result[id][i] = instance[i];
           }
         }
       }
     }
   }
-  
+
   return result;
 }
 
@@ -81,7 +84,7 @@ if (Drupal.tableDrag) {
     if (this.group.length > 1) {
       return invocation.proceed();
     }
-    
+
     // Get the editor instances in the row being dragged. If there aren't any, let tabledrag's
     // default implementation proceed.
     var position = invocation.arguments[0];
@@ -91,16 +94,16 @@ if (Drupal.tableDrag) {
     if (!instances) {
       return invocation.proceed();
     }
-    
+
     // If thisRow is the same as referenceRow, then nothing will happen during a swap.
     // However, letting the default swap behavior run will result in the editors' iframes
     // being reloaded and messed up, so instead, we just force nothing to happen.
     if (thisRow == referenceRow) {
       return;
     }
-    
+
     // If we reached here, it means we need to let tabledrag swap the rows. However,
-    // if the editors have iframes, they'll probably get messed up by the swap, 
+    // if the editors have iframes, they'll probably get messed up by the swap,
     // so we want to detach the editors before the swap, and reattach them after the swap.
     for (var id in instances) {
       Drupal.wysiwygDetach(thisRow, instances[id]);
@@ -109,7 +112,7 @@ if (Drupal.tableDrag) {
     for (var id in instances) {
       Drupal.wysiwygAttach(thisRow, instances[id]);
     };
-    
+
     return result;
   });
 }
